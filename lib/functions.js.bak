const fs = require('fs');
const cfonts = require("cfonts")
const moment = require("moment-timezone")
const axios = require('axios')
const { sizeFormatter } = require('human-readable')


const banner = cfonts.render(('Deku|Bot'), {
   font: "block",
   align: "center",
   colors: ["greenBright", "white"]
})

const getBuffer = async (url, opcoes) => {
   try {
      opcoes ? opcoes : {}
      const post = await axios({
         method: "get",
         url,
         headers: {
            'user-agent': 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36',
            'DNT': 1,
            'Upgrade-Insecure-Request': 1
         },
         ...opcoes,
         responseType: 'arraybuffer'
      })
      return post.data
   } catch (erro) {
      console.log(`Erro identificado: ${erro}`)
   }
}

const getRandom = (ext) => {
   return `${Math.floor(Math.random() * 10000)}${ext}`;
};

const getExtension = async (type) => {
   return await mimetype.extension(type)
}

//======//

const time2 = moment().tz('America/asuncion').format('HH:mm:ss')
if (time2 > "00:00:00"){
   var time = 'Buenas noches ðŸŒƒ'
}
if (time2 > "05:30:00") {
   var time = 'Buenos dias ðŸŒ„'
}
if (time2 > "12:00:00") {
   var time = 'Buenas tardes ðŸŒ‡'
}
if (time2 > "20:30:00") {
   var time = 'Buenas noches ðŸŒƒ'
}
const timee = moment.tz("America/asuncion").format("HH:mm:ss")

const banner2 = cfonts.render((`${time}`), {
   font: "console",
   align: "center",
})

const runtime = function(seconds) {
	seconds = Number(seconds);
	var d = Math.floor(seconds / (3600 * 24));
	var h = Math.floor(seconds % (3600 * 24) / 3600);
	var m = Math.floor(seconds % 3600 / 60);
	var s = Math.floor(seconds % 60);
	var dDisplay = d > 0 ? d + (d == 1 ? " dÃ­a, " : " dias, ") : "";
	var hDisplay = h > 0 ? h + (h == 1 ? " hora, " : " horas, ") : "";
	var mDisplay = m > 0 ? m + (m == 1 ? " minuto, " : " minutos, ") : "";
	var sDisplay = s > 0 ? s + (s == 1 ? " segundo" : " segundos") : "";
	return dDisplay + hDisplay + mDisplay + sDisplay;
}

const formatp = sizeFormatter({
    std: 'JEDEC', //'SI' = default | 'IEC' | 'JEDEC'
    decimalPlaces: 2,
    keepTrailingZeroes: false,
    render: (literal, symbol) => `${literal} ${symbol}B`,
})

const sleep = async (ms) => {
    return new Promise(resolve => setTimeout(resolve, ms));
}

module.exports = {
   checkRegisteredUser,
   banner,
   getBuffer,
   getRandom,
   getExtension,
   banner2,
   time,
   runtime,
   formatp,
   sleep
}